- address_id = address_type.chars.first
.inner
  .field.field-required{id: "#{address_id}firstname"}
    = form.label :firstname, t('spree.first_name'), class: 'label'
    %p.control
      = form.text_field :firstname, class: 'input required', autocomplete: address_type + ' given-name', required: true, autofocus: true

  .field{id: "#{address_id}lastname"}
    = form.label :lastname, t('spree.last_name'), class: 'label'
    %p.control
      = form.text_field :lastname, autocomplete: address_type + ' family-name', class: 'input'

  - if Spree::Config[:company]
    .field{id: "#{address_id}company"}
      = form.label :company, t('spree.company'), class: 'label'
      %p.control
        = form.text_field :company, autocomplete: address_type + ' organization', class: 'input'

  .field.field-required{id: "#{address_id}address1"}
    = form.label :address1, t('spree.street_address'), class: 'label'
    %p.control
      = form.text_field :address1, class: 'input required', autocomplete: address_type + ' address-line1',  required: true

  .field{id: "#{address_id}address2"}
    = form.label :address2, I18n.t('spree.street_address_2'), class: 'label'
    %p.control
      = form.text_field :address2, autocomplete: address_type + ' address-line2', class: 'input'

  .field.field-required{id: "#{address_id}city"}
    = form.label :city, t('spree.city'), class: 'label'
    %p.control
      = form.text_field :city, class: 'input required', autocomplete: address_type + ' address-level2',  required: true

  .field.field-required{id: "#{address_id}country"}
    = form.label :country_id, t('spree.country'), class: 'label'
    %p.control{id: "#{address_id}country-selection"}
      .select.is-fullwidth
        = form.collection_select :country_id, available_countries, :id, :name, {}, class: 'required', autocomplete: address_type + ' country-name', required: true

  - if Spree::Config[:address_requires_state]
    .field.field-required{id: "#{address_id}state"}
      - have_states = !address.country.states.empty?
      = form.label :state, t('spree.state'), class: 'label'

      %p.control.js-address-fields{style: "display: none;"}
        .select.is-fullwidth
          = form.collection_select( :state_id, address.country.states, :id, :name,
            { include_blank: true },
            { class: have_states ? 'required' : '',
              style: have_states ? '' : 'display: none;',
              disabled: !have_states,
              autocomplete: address_type + ' address-level1' })

        = form.text_field( :state_name,
          class: !have_states ? 'input required' : 'input',
          style: have_states ? 'display: none;' : '',
          disabled: have_states,
          autocomplete: address_type + ' address-level1' )

      %noscript
        = form.text_field :state_name, class: 'required', autocomplete: address_type + ' address-level1',  required: true

  - if address.require_zipcode?
    .field.field-required{id: "#{address_id}zipcode"}
      = form.label :zipcode, t('spree.zip'), class: 'label'
      %p.control
        = form.text_field :zipcode, class: "input required", autocomplete: address_type + ' postal-code',  required: true
  - else
    .field{id: "#{address_id}zipcode"}
      = form.label :zipcode, t('spree.zip'), class: 'label'
      %p.control
        = form.text_field :zipcode, autocomplete: address_type + ' postal-code', class: 'input'

  - if address.require_phone?
    .field.field-required{id: "#{address_id}phone"}
      = form.label :phone, t('spree.phone'), class: 'label'
      %p.control
        = form.phone_field :phone, class: 'input required', autocomplete: address_type + ' home tel', required: true
  - else
    .field{id: "#{address_id}phone"}
      = form.label :phone, t('spree.phone'), class: 'label'
      %p.control
        = form.phone_field :phone, autocomplete: address_type + ' home tel', class: 'input'

  - if Spree::Config[:alternative_shipping_phone]
    .field{id: "#{address_id}altphone"}
      = form.label :alternative_phone, t('spree.alternative_phone'), class: 'label'
      %p.control
        = form.phone_field :alternative_phone, autocomplete: address_type + ' tel', class: 'input'
